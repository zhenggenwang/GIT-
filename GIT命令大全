# 配置GIT账户和EMail地址：
# --global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

# 创建版本库：
git init

# 把文件添加到仓库：
git add 文件名.后缀

# 把文件提交到仓库：
git commit -m "本次提交的说明"

# 查看仓库当前的状态：
git status

# 查看某个文件具体修改了什么内容：
git diff 文件名.后缀

# 提交修改的文件跟提交新文件命令是一样的：
git add 文件名.后缀
git commit -m "本次提交的说明"

# 查年提交的历史记录：
git log

# 版本回退：上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
git reset --hard head^                                              # 回退到上一个版本
git reset --hard b6f6a0cdbe00458afdd86d1bcd96de5f1fc3fd79           # 回退到指定的版本

# 在命令窗口查看文本文件的内容：
cat readme.txt

# 查看你执行的每一次命令
git reflog             # 可以查看某个版本的HEAD指针，从而回退到该版本

# 让这个文件回到最近一次git commit或git add时的状态：
git checkout -- readme.txt

# 把暂存区的修改撤销掉（unstage），重新放回工作区：
git reset HEAD readme.txt              # 使用此命令把修改重新放回工作区后，再用 git check 命令撤消更改

# 把误删的工作区内的文件恢复到最新版本：
git checkout -- test.txt

# 从版本库中删除文件
git rm test.txt
git commit -m "remove test.txt"

# 把一个已有的本地仓库与远程库之关联
git remote add origin https://github.com/zhenggenwang/kunlunjue_Qest.git

#把本地仓库的内容推送到GitHub仓库：
git push -u origin master
# 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
# 还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

# 推送的简化命令：
git push origin master

# 从远程库克隆到本地：
git clone https://github.com/zhenggenwang/kunlunjue_Qest.git

# 创建并切换分支：
git checkout -b dev              # 创建dev分支并把HEAD指针切换到dev分支上
# 上一步操作相当于下面两条命令：
git branch dev                   # 创建分支
git checkout dev                 # 切换分支

# 查看当前分支：
git branch         # 该命令会列出所有分支，当前分支前面会标一个*号

# 合并指定分支到当前的分支：
git merge dev               # 把dev分支合并到当前分支（master）

# 删除指定分支
git branch -d dev

# 合并分支时若冲突，需要先解决冲突才能进行合并
# git会列出冲突的内容，需要手动改成你需要的样子，然后再提交

# 通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
# 强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
git merge --no-ff -m "merge with no-ff" dev
# 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

# 现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
git checkout -b dev origin/dev

# 查看远程库信息
git remote -v

# 你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：
# 推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，
# 先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
git pull

# git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
git branch --set-upstream-to=origin/dev dev
# 再使用git pull命令就可以了。

# 这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
git commit -m "fix env conflict"          # 解决冲突并提交
git push origin dev                       # 推送到远程分支

# 因此，多人协作的工作模式通常是这样：
# 首先，可以试图用git push origin <branch-name>推送自己的修改；

  如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

  如果合并有冲突，则解决冲突，并在本地提交；

  没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

  如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

  这就是多人协作的工作模式，一旦熟悉了，就非常简单。


# 创建标签，切换到需要打标签的分支上，敲命令：
git tag v1.0

#查看所有标签：
git tag

# 标签默认是打在最新提交的commit上的，若要打在以前的修改的标签，需要找到历史提交的commit id：
git log --pretty=oneline --abbrev-commit
4ff71be (HEAD -> master, tag: v1.0, origin/master) conflict fixed
7cc4c78 add txt 333333
0876575 add txt 22222
b6e7287 add readme.txt
806b79d remove readme.md
94bfc2c add all quest files

git tag v0.9 0876575

# 查看标签信息：
git show v0.9

# 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
git tag -a v0.1 -m "version 0.1 released" 1094adb

# 如果标签打错了，也可以删除：
git tag -d v0.1

# 如果要推送某个标签到远程，使用命令git push origin <tagname>：
git push origin v1.0

#一次性推送全部尚未推送到远程的本地标签：
git push origin --tags

# 如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
git tag -d v0.9
# 然后，从远程删除。删除命令也是push，但是格式如下：
git push origin :refs/tags/v0.9















git init                                                  # 初始化本地git仓库（创建新仓库）
git config --global user.name "xxx"                       # 配置用户名
git config --global user.email "xxx@xxx.com"              # 配置邮件
git config --global color.ui true                         # git status等命令自动着色
git config --global color.status auto
git config --global color.diff auto
git config --global color.branch auto
git config --global color.interactive auto
git config --global --unset http.proxy                    # remove  proxy configuration on git
git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库
git status                                                # 查看当前版本状态（是否修改）
git add xyz                                               # 添加xyz文件至index
git add .                                                 # 增加当前子目录下所有更改过的文件至index
git commit -m 'xxx'                                       # 提交
git commit --amend -m 'xxx'                               # 合并上一次提交（用于反复修改）
git commit -am 'xxx'                                      # 将add和commit合为一步
git rm xxx                                                # 删除index中的文件
git rm -r *                                               # 递归删除
git log                                                   # 显示提交日志
git log -1                                                # 显示1行日志 -n为n行
git log -5
git log --stat                                            # 显示提交日志及相关变动文件
git log -p -m
git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容
git show dfb02                                            # 可只用commitid的前几位
git show HEAD                                             # 显示HEAD提交日志
git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本
git tag                                                   # 显示已存在的tag
git tag -a v2.0 -m 'xxx'                                  # 增加v2.0的tag
git show v2.0                                             # 显示v2.0的日志及详细内容
git log v2.0                                              # 显示v2.0的日志
git diff                                                  # 显示所有未添加至index的变更
git diff --cached                                         # 显示所有已添加index但还未commit的变更
git diff HEAD^                                            # 比较与上一个版本的差异
git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异
git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的
git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容
git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）
git branch                                                # 显示本地分支
git branch --contains 50089                               # 显示包含提交50089的分支
git branch -a                                             # 显示所有分支
git branch -r                                             # 显示所有原创分支
git branch --merged                                       # 显示所有已合并到当前分支的分支
git branch --no-merged                                    # 显示所有未合并到当前分支的分支
git branch -m master master_copy                          # 本地分支改名
git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出
git checkout -b master master_copy                        # 上面的完整版
git checkout features/performance                         # 检出已存在的features/performance分支
git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支
git checkout v2.0                                         # 检出版本v2.0
git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出
git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）
git merge origin/master                                   # 合并远程master分支至当前分支
git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改
git push origin master                                    # 将当前分支push到远程master分支
git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支
git push --tags                                           # 把所有tag推送到远程仓库
git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）
git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支
git pull origin master                                    # 获取远程分支master并merge到当前分支
git mv README README2                                     # 重命名文件README为README2
git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）
git rebase
git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）
git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933
git ls-files                                              # 列出git index包含的文件
git show-branch                                           # 图示当前分支历史
git show-branch --all                                     # 图示所有分支历史
git whatchanged                                           # 显示提交历史对应的文件修改
git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818
git ls-tree HEAD                                          # 内部命令：显示某个git对象
git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH
git reflog                                                # 显示所有提交，包括孤立节点
git show HEAD@{5}
git show master@{yesterday}                               # 显示master分支昨天的状态
git log --pretty=format:'%h %s' --graph                   # 图示提交日志
git show HEAD~3
git show -s --pretty=raw 2be7fcb476
git stash                                                 # 暂存当前修改，将所有至为HEAD状态
git stash list                                            # 查看所有暂存
git stash show -p stash@{0}                               # 参考第一次暂存
git stash apply stash@{0}                                 # 应用第一次暂存
git grep "delete from"                                    # 文件中搜索文本“delete from”
git grep -e '#define' --and -e SORT_DIRENT
git gc
git fsck
